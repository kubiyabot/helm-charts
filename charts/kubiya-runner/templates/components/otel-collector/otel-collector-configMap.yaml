apiVersion: v1
kind: ConfigMap
metadata:
  name:  kubiya-runner-otel-collector-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{ include "otel-collector-extras.labels" . | nindent 4 }}
data:
  config.yaml: |
    # Otel-collector configuration file
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:3000

      # Kubernetes API server (kube-apiserver) metrics via otel-collector receiver
      k8s_events:
        auth_type: serviceAccount
        namespaces:
          - {{ .Release.Namespace }}

      # Kubelet metrics via otel-collector receiver
      prometheus:
        config:
          scrape_configs:
            # Kube-state-metrics exporter metrics receiver
            - job_name: 'kube-state-metrics'
              scrape_interval: 30s
              static_configs:
                - targets: ['kube-state-metrics:8080']
              kubernetes_sd_configs:
                - role: endpoints
                  namespaces:
                    names:
                      - {{ .Release.Namespace }}
              relabel_configs:
                - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
                  regex: kube-state-metrics
                  action: keep

            # Dynamic service discovery for Kubiya apps, for all metrics exposed by services on default /metrics endpoint
            - job_name: "kubiya-apps"
              scrape_interval: 10s
              kubernetes_sd_configs:
                - role: service
                  namespaces:
                    names: ["{{ .Release.Namespace }}"]
              relabel_configs:
                # Keep only services we want to scrape
                # TODO add more once exporters are ready
                - source_labels: [__meta_kubernetes_service_name]
                  action: keep
                  regex: (tool-manager|agent-manager)
                # Add app label
                - source_labels: [__meta_kubernetes_service_name]
                  target_label: app
                # Use the service port
                - source_labels: [__meta_kubernetes_service_port_number]
                  target_label: __metrics_port__

    processors:
      k8sattributes:
        auth_type: serviceAccount
        filter:
            namespace: {{ .Release.Namespace }}

      batch:

      resource:
        attributes:
          # TODO: discuss with team, make sure this is not duplicated metricstransform.transforms.operations
          - key: "instance"
            value: {{ .Values.organization | quote }}
            action: upsert
          - key: "runner"
            value: {{ .Values.runnerNameOverride | default .Release.Name | quote }}
            action: upsert
          - key: "organization"
            value: {{ .Values.organization | quote }}
            action: upsert
      
      # TODO: discuss with team, make sure this is not duplicated resource.attributes
      metricstransform:
        transforms:
          - include: '.*'
            match_type: regexp
            action: update
            operations:
              
              # TODO: discuss with team, make sure instance is needed as it's duplicated
              - action: update_label
                label: "instance"
                new_label: "instance"
                new_value: {{ .Values.organization | quote }}
              
              - action: add_label
                label: "kubiya_type"
                new_label: "kubiya_type"
                new_value: "customers-runners"
              - action: add_label
                label: "runner"
                new_label: "runner"
                new_value: {{ .Values.runnerNameOverride | default .Release.Name | quote }}
              
              - action: add_label
                label: "organization"
                new_label: "organization"
                new_value: {{ .Values.organization | quote }}

    exporters:
      debug:
        # Debug output for testing
        # verbosity: detailed
        verbosity: normal
        # sampling_initial: 5
        # sampling_thereafter: 200
      natsexporter:
        org: {{ .Values.organization | quote }}
        endpoint: {{ .Values.nats.serverUrl | quote }}
        creds_file: "/etc/nats/nats.creds"

    extensions:
      health_check:
        endpoint: ${env:MY_POD_IP}:13133

    service:
      # extensions:
      #   - health_check
      pipelines:
        logs:
          receivers: [ k8s_events ]
          processors: [ batch, resource ]
          exporters: [ natsexporter ]
        metrics:
          receivers: [ prometheus ]
          processors: [ metricstransform, k8sattributes, batch, resource ]
          exporters: [ natsexporter ]
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ natsexporter ]
      telemetry:
        logs:
