---
# otel-collector-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector-sa
  namespace: kubiya
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "deployments", "events", "namespaces", "endpoints", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-cr-binding
subjects:
  - kind: ServiceAccount
    name: otel-collector-sa
    namespace: kubiya
roleRef:
  kind: ClusterRole
  name: otel-collector-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# otel-collector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: kubiya
  labels:
    app: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: otel-collector-sa
      containers:
        - name: otel-collector
          image: ghcr.io/kubiyabot/otel-connector:latest
          command:
            - "/otelcol-kubiya"
            - "--config=/etc/otel-collector-config.yaml"
          volumeMounts:
            - name: otel-collector-config-vol
              mountPath: /etc/otel-collector-config.yaml
              subPath: otel-collector-config.yaml
            - name: otel-collector-sa-token
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
            - name: nats-creds-volume
              mountPath: "/etc/nats"
              readOnly: true
      volumes:
        - name: nats-creds-volume
          secret:
            secretName: nats-creds-runner # pragma: allowlist secret
            items:
              - key: nats.creds
                path: nats.creds
        - name: otel-collector-config-vol
          configMap:
            name: otel-collector-config
        - name: otel-collector-sa-token
          secret:
            secretName: otel-collector-sa-token # pragma: allowlist secret
---
# ClusterRole for creating persistent volumes
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubiya-cluster-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
---
# ClusterRoleBinding for the kubiya-service-account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubiya-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubiya-cluster-role
subjects:
- kind: ServiceAccount
  name: kubiya-service-account
  namespace: kubiya
---
# namespace
apiVersion: v1
kind: Namespace
metadata:
  name: kubiya
---
# nats creds jwt secret
apiVersion: v1
kind: Secret
metadata:
  name: nats-creds-runner
  namespace: kubiya
type: Opaque
data:
  nats.creds: "LS0tLS1CRUdJTiBOQVRTIFVTRVIgSldULS0tLS0KZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKbFpESTFOVEU1TFc1clpYa2lmUS5leUpxZEdraU9pSk5TVXhXUkVvME0wWktURUkzTWtOWVExcEpVRnBHTWtsRk0wdENURkZFVDBwSE56VldSbFV5VGswMFRWZFZNbE5YVmpKUklpd2lhV0YwSWpveE56TXdOak0xTXpVMkxDSnBjM01pT2lKQlExUkJVVm8yVFZkU1YwdE9SRWxLUlVaTFRFSkpSakpNUkZCVlJrdFdTMU5PTlVkTVUwdEhVa1l6TjFKSU1rVlVWVmxOVTAxQ1ZDSXNJbTVoYldVaU9pSnJkV0pwZVdFdGRHVnpkQzF6Ym1sbVppNXpaWEpuWlhrdGJXVjBjbWxqY3kxMFpYTjBJaXdpYzNWaUlqb2lWVUpKVEVWRldrUk5SVE5RVVU0elRWRlBURnBCV0VaUE0xSlNUekl5VUVGT1QxVkdWRlpNVlVOVFFWZEVSa05UUXpaWk5GWldOek1pTENKdVlYUnpJanA3SW5CMVlpSTZlMzBzSW5OMVlpSTZlMzBzSW1semMzVmxjbDloWTJOdmRXNTBJam9pUVVGWVQxQlVOVTFIU2t0VVN6WTJVRGROVnpKU1VrbE1VVmhJUXpaRVdrdFVWRTgyU0ZkRVdFOUxTbEZPUlVsSlNVOU5WVm8wUWxNaUxDSjBlWEJsSWpvaWRYTmxjaUlzSW5abGNuTnBiMjRpT2pKOWZRLmlsT21KcWx5c1ZwV2l1SDAtZVdwOXYzZFF5WE5zY0NaT1VwNW55LVYwd3hTWWVoTWlqcHdJX18xMUs0MUdHLVZYTXpCNUNtR3FOZlY1M1dMV1FtOEFnCi0tLS0tLUVORCBOQVRTIFVTRVIgSldULS0tLS0tCgoqKioqKioqKioqKioqKioqKioqKioqKioqIElNUE9SVEFOVCAqKioqKioqKioqKioqKioqKioqKioqKioqCk5LRVkgU2VlZCBwcmludGVkIGJlbG93IGNhbiBiZSB1c2VkIHRvIHNpZ24gYW5kIHByb3ZlIGlkZW50aXR5LgpOS0VZcyBhcmUgc2Vuc2l0aXZlIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhcyBzZWNyZXRzLgoKLS0tLS1CRUdJTiBVU0VSIE5LRVkgU0VFRC0tLS0tClNVQUpYWjNQQklSRVpMNE1VWjRVUFBBV1E0M0FPU1pGSUdITTJQSEczNU5XSUVHNjdWNkNMV0hMTkEKLS0tLS0tRU5EIFVTRVIgTktFWSBTRUVELS0tLS0tCgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCg=="
---
# second nats creds jwt secret
apiVersion: v1
kind: Secret
metadata:
  name: nats-creds-customer
  namespace: kubiya
type: Opaque
data:
  nats.creds: "LS0tLS1CRUdJTiBOQVRTIFVTRVIgSldULS0tLS0KZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKbFpESTFOVEU1TFc1clpYa2lmUS5leUpxZEdraU9pSXpUMEZCUWtKWlNWTk1RemREVkRORlNGZFVWVlZhVWpkQlQxWkVUalZDUmt0T1UwWlFWMWRKVVVaRFVGbEhTbFF6VmxGUklpd2lhV0YwSWpveE56SXdNREF5TkRNekxDSnBjM01pT2lKQlJFMDJOMUphVmxwUk5FaFBVMGhPTWxORVNsQlVRbFpZTTAwM1dWaEpUVE15TkRkS1JVeFZVRFJRVHpWT1dVbEpORmRLUjB0VVZpSXNJbTVoYldVaU9pSnJkV0pwZVdFdGRHVnpkQzF6Ym1sbVppSXNJbk4xWWlJNklsVkVRa00xVkVwS1MwNVBTbFl6UVZWTldUZEpUbFJCUWpaYVYxVk1UbEJNTkV0VFdWWk9VemRMU2xjelJUZExSME5FU1ZwUVFVOUpJaXdpYm1GMGN5STZleUp3ZFdJaU9udDlMQ0p6ZFdJaU9udDlMQ0pwYzNOMVpYSmZZV05qYjNWdWRDSTZJa0ZCV0U5UVZEVk5SMHBMVkVzMk5sQTNUVmN5VWxKSlRGRllTRU0yUkZwTFZGUlBOa2hYUkZoUFMwcFJUa1ZKU1VsUFRWVmFORUpUSWl3aWRIbHdaU0k2SW5WelpYSWlMQ0oyWlhKemFXOXVJam95ZlgwLmdBbmo1Tnc4aXpvWjNTZXB2U1VzandEZ2xaSlVEQ0p2WGlPb3pXemRocGhGdG03TElud1JoclhTS05RcE9UeUpadm5XM2QyYWg0bmZIMzFBVkF1S0J3Ci0tLS0tLUVORCBOQVRTIFVTRVIgSldULS0tLS0tCgoqKioqKioqKioqKioqKioqKioqKioqKioqIElNUE9SVEFOVCAqKioqKioqKioqKioqKioqKioqKioqKioqCk5LRVkgU2VlZCBwcmludGVkIGJlbG93IGNhbiBiZSB1c2VkIHRvIHNpZ24gYW5kIHByb3ZlIGlkZW50aXR5LgpOS0VZcyBhcmUgc2Vuc2l0aXZlIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhcyBzZWNyZXRzLgoKLS0tLS1CRUdJTiBVU0VSIE5LRVkgU0VFRC0tLS0tClNVQUdCMzNYMkdFVEJOQldZU1ZNTDRDQVFQNUpJWFpKTzJKV0ZaUEpWRkczQTdJUDdFVFRTWk9VNDQKLS0tLS0tRU5EIFVTRVIgTktFWSBTRUVELS0tLS0tCgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCg=="
---
# second nats creds jwt secret
apiVersion: v1
kind: Secret
metadata:
  name: registry-tls-secret
  namespace: kubiya
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ4VENDQXRtZ0F3SUJBZ0lVTVBIY1RMN1FGNmMrYlhtNElxTEUzeXVhK1lrd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2NURUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1SSXdFQVlEVlFRSERBbFRkVzV1ZVhaaApiR1V4RHpBTkJnTlZCQW9NQmt0MVltbDVZVEVNTUFvR0ExVUVDd3dEVWs1RU1TSXdJQVlEVlFRRERCbGpZV05vClpTMXlaV2RwYzNSeWVTMXpkbU11YTNWaWFYbGhNQjRYRFRJME1UQXdNakV5TkRZeU4xb1hEVEkzTURrd01qRXkKTkRZeU4xb3djVEVMTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnTUFrTkJNUkl3RUFZRFZRUUhEQWxUZFc1dQplWFpoYkdVeER6QU5CZ05WQkFvTUJrdDFZbWw1WVRFTU1Bb0dBMVVFQ3d3RFVrNUVNU0l3SUFZRFZRUUREQmxqCllXTm9aUzF5WldkcGMzUnllUzF6ZG1NdWEzVmlhWGxoTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBM3c5b2dVUGptaVNaMDR1OU4vR3hKRmhCT01QYzQ3MXJLR1ozZVc2bW43NW1FTjNzV2R1cwpzVStkK1lNSE9HYjBUT3FlcHhMUUtvMWNRYjVRUmlRTGxOVTJWRGgrTjVhZVVmdVJUU1MwczNRWTAxd1k1Z3ozCnIvaFc3ZllEOVVpTUpTeFhYK01DU2hsQ0NTUm52N2hncmloQWlGdXcyZUs3bjQyWjByYms2MUJmaGNBRWxZbmEKdExoRjBwcWxvNGlsSHZaUGEwdzRFMzJBdkJJTzZ5YjlKb1V0N1JRMVNta3VLRDJsY2dqMVlKSjQ2SmxKUGtFWgowL21Zc3ZwZUZBOVBmQnZGdkZ6K0VyMitMd09JKzcxNFRtTnNITXVERjRyNzVNeFF5ekpaYTNxT3Rud3paTEVYCjlHYThHZ1AxVG9jVGtlRnVMUmhjVWQ4M3M5eWJIS0o1bHdJREFRQUJvNEdBTUg0d0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNRGdHQTFVZEVRUXhNQytDR1dOaFkyaGxMWEpsWjJsegpkSEo1TFhOMll5NXJkV0pwZVdHQ0VtTmhZMmhsTFhKbFoybHpkSEo1TFhOMll6QWRCZ05WSFE0RUZnUVVxQlpGCkZKZEZLQ1M0SGtSYWxtNmM1WFFORlJVd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFHYXlraDhhV3QwaTdpNnMKOGZZRHlZVE8wMjZOYjQ5dWNUZDRpKzgySGFCdm01ZFJxbVQ5U0V4eFJYL3RTanMraGpHRnpYTWVtY0lva3FKLwpFNWtSYlcrbFNveWUwQkdkTVBPcVJNZW1tcEI4WG9DZmo0ZWg0WkxtbDRrbGVSZEEzRU96OHJSRExxb0MxdmJiClluU2RwTjFHbUFJOUtpdjJ0N3hjVVl0Nm1SM2FqYVBLZHVWOXNkakRrZDBDQm1EckhNRXJ4a3AzdDVXOHc5aW8KN2IxRjE3MFBSRldJNVY3c3JtQlFwK0t6UTJsZEdyODdxZFI1eE1wZlU4Z0IvKzgyRXlZcjA1WTJsNmhrY1BGbgpzMnBPTUV4UFVVN05xQlMxeURoR3lXZVVJTE9ydmFuWjh3L1UyVDFScjd1bTBGK0Y0a3hTMHZNMDhyYmRIMzNPCjVyUDV1OEk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" # pragma: allowlist secret
  tls.key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRRGZEMmlCUStPYUpKblQKaTcwMzhiRWtXRUU0dzl6anZXc29abmQ1YnFhZnZtWVEzZXhaMjZ5eFQ1MzVnd2M0WnZSTTZwNm5FdEFxalZ4Qgp2bEJHSkF1VTFUWlVPSDQzbHA1Uis1Rk5KTFN6ZEJqVFhCam1EUGV2K0ZidDlnUDFTSXdsTEZkZjR3SktHVUlKCkpHZS91R0N1S0VDSVc3RFo0cnVmalpuU3R1VHJVRitGd0FTVmlkcTB1RVhTbXFXamlLVWU5azlyVERnVGZZQzgKRWc3ckp2MG1oUzN0RkRWS2FTNG9QYVZ5Q1BWZ2tuam9tVWsrUVJuVCtaaXkrbDRVRDA5OEc4VzhYUDRTdmI0dgpBNGo3dlhoT1kyd2N5NE1YaXZ2a3pGRExNbGxyZW82MmZETmtzUmYwWnJ3YUEvVk9oeE9SNFc0dEdGeFIzemV6CjNKc2Nvbm1YQWdNQkFBRUNnZ0VBSktHSXBYWExLbFNwYUZxeDY3Nkd1ek85SGovWUJoUmt4U0V5ckovMXdCVUoKK09vZzlzN0RDT2xNeFoxMWNaZEN0bUR2UmZ1cWNOcC9GSkxXNXZYamF3RXFwMkVScFRwWWJKazJEdWVndnptcApIQWlyVkJnOEVzdGpKemY0Qlc5eENHZkVQNHh0bzFLTGpDbk0yZWpEQThhN2Rra3NmVk9sUVRvRlVWdlVzeW5VCjBYSTNtY01pM1pzMWdodDNuRXdWSjBMbGVwT2FvQi9iOUhjY2Q0TGN2M2dGWnlOdkVpckgyeDdWMmYremRKQ3QKcXpQLzlXMVR5aE42VWRlMENuVjFTLzh0QTFYQW56MW05VmIyK2h4ZkM5MDlZREJLV3RqVjVQT01aZU5xUVFqVwpqaXpTNnE1dE1UZWpzd1RYRkRMRThKYk4yU3Zld0s2OVZIUkdtdXU3dVFLQmdRRHZtNzNHYStYNy9nVFR3bFJjCk4vSTJ1Q1hSOE5HNW90ZGZjbkFPU2lnc2hpc0tPaHpoSnJlVHVnQm9HeXQyWHU3N2FWQ3EzWHJtdDNVOUhxZVUKSzB1TDdONm1zNzdUWUp4ZHd3RkpOaWJBbWpXRVlDbnR4eldaWjd5Um1zcGg1YnZEL2x0WXpEdFVBZ0QybHZXbwpVTm1YL3VZQ3NZcXZpSmhzdFMxWkF4WklLUUtCZ1FEdVVkdmYyYmx6OTRkYTNVb0tNNjlyZ044QmgxaEwybUVmCnhQeXFZSHFtOGVXaklWL0U4WXM4UTFZSm1KOEZ3dVlyWnREQmMrRTBMeCtaK2FEdy9IdksyZUY3K25Wc0FGUEcKYkhacDhYRkFITlVMdWlwVVlzWjRqaTFYTDEwdEtXZVozN0FVdEpFM3drZ28yZ1NDcHVLVkU1Q2xDTDVoRXIyZAorWVU5QVQzcnZ3S0JnUUMva1Vmb0ZTb2FENXh5WllNbSs3L1dpZUlLK0x2azdGRy9TUEpZS21mMk9RcStNWG9YCmRPbiszUTRvTGRqUTJkTytCQlJ2bDRZRVloY0UxN1pwbXpmYVZuWW8xN3F3cXlRNVBvaVByUkRNbWo1QmFOVDgKKzNGYUJmdFllbVptWU5OL1BxUnYyVkZ4dCt4bk9vaUxtcUJ0aW1rQkxFdFNUaVozZTE4WE5JV2pDUUtCZ1FDcgppSW5zNWlaZ3ZPSlUyWUJJTllsbXBGeGZHazdJVWdla09VSHZWQUFVRjNwRTMybXlOSFVXVEJVcVZRcm90NjY1CndJZ3pKYmdMdW50UmRXYU03ZjRnTkpEaWpwUmp4eHlGYmw0UXhUTFJoYThtZ0xtbEFXOS9LRDZrU1RnVW9IK3MKTmwvamwxQUt4VER4RG5NK291WGxqUzZJU3ZIVXB3dUtJQ1h4a2VwQ3V3S0JnUUM2MEZlbGkwU29aSzUvWlpWagorRHp3WW5ZaXdVZ3ZyRXhUWkxtMXhsanoveFRkRzc4OWZ5c3p4T0UrdzFQUHNOTFROYW05L0RYeXNMaUJKdDJUCjMvc1dZVk5Qc3BWR1FsMVUxOEpCSzZVZlFBOVB1QmF3ZnhMSWRiaTluc1lXYnQyK1pzcW9NOGtPUThSMlVJS3oKSlFidFcrTUVZZ2k0L0wrZ0MxSkNaZ1BvUFE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="  # pragma: allowlist secret
---
# deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubiya-operator
  namespace: kubiya
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubiya-operator
  template:
    metadata:
      labels:
        app: kubiya-operator
    spec:
      serviceAccountName: kubiya-service-account
      containers:
        - name: kubiya-operator
          image: "ghcr.io/kubiyabot/kubiya-operator:runner_v2"
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: NATS_SERVER
              value: tls://connect.ngs.global
            - name: NATS_SUBJECT
              value: kubiya-test-sniff.sergey-metrics-test.incoming
            - name: NATS_CREDENTIAL_FILE
              value: "/etc/nats/nats.creds"
            - name: NAMESPACE
              value: kubiya
          volumeMounts:
            - name: nats-creds-volume
              mountPath: "/etc/nats"
              readOnly: true
      volumes:
        - name: nats-creds-volume
          secret:
            secretName: nats-creds-runner # pragma: allowlist secret
            items:
              - key: nats.creds
                path: nats.creds
---
# service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubiya-service-account
  namespace: kubiya
---
# kubiya role
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubiya-role
  namespace: kubiya
rules:
  - apiGroups: [ "*" ]
    resources: [ "*" ]
    verbs: [ "*" ]
---
# kubiya role binding
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubiya-role-binding
  namespace: kubiya
subjects:
  - kind: ServiceAccount
    name: kubiya-service-account
    namespace: kubiya
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubiya-role
---
# dagger namespace
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: dagger
    name: dagger
  name: dagger
---
# daegger engine-config
apiVersion: v1
kind: ConfigMap
metadata:
  name: dagger-dagger-helm-engine-config
  namespace: dagger
  labels:
    helm.sh/chart: dagger-helm-0.13.3
    app.kubernetes.io/name: dagger-helm
    app.kubernetes.io/instance: dagger
    app.kubernetes.io/version: v0.13.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: dagger-helm
data:
  engine.toml: |
    debug = true
    insecure-entitlements = ["security.insecure"]
    [registry."ghcr.io"]
      http = true
    [registry."ttl.sh"]
      http = true
    [registry."docker.io"]
      http = true
    [registry."cache-registry-svc.kubiya"]
    [log]
      format = "json"
---
# daegger daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: dagger-dagger-helm-engine
  namespace: dagger
  labels:
    helm.sh/chart: dagger-helm-0.13.3
    app.kubernetes.io/name: dagger-helm
    app.kubernetes.io/instance: dagger
    app.kubernetes.io/version: v0.13.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: dagger-helm
spec:
  selector:
    matchLabels:
      name: dagger-dagger-helm-engine
  template:
    metadata:
      annotations:
        checksum/config: a07dcb45c3e43598f5c6d1fd63ac258b70166868a3bd2374e7ff8238db0aa966
      labels:
        name: dagger-dagger-helm-engine
        helm.sh/chart: dagger-helm-0.13.3
        app.kubernetes.io/name: dagger-helm
        app.kubernetes.io/instance: dagger
        app.kubernetes.io/version: v0.13.3
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: dagger-helm
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: "OnRootMismatch"
      serviceAccountName: default
      containers:
        - name: dagger-engine
          image: ghcr.io/kubiyabot/kubiya-registry:v0.1.1
          imagePullPolicy: IfNotPresent
          args:
            - --oci-max-parallelism
            - num-cpu
          securityContext:
            privileged: true
            capabilities:
              add:
                - ALL
          resources:
            limits: {}
            requests: {}
          readinessProbe:
            exec:
              command:
              - buildctl
              - debug
              - workers
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 30
          volumeMounts:
            - name: varlibdagger
              mountPath: /var/lib/dagger-679adc53-7068-4454-aa9f-16df30b14a50
            - name: varrundagger
              mountPath: /var/run/buildkit-679adc53-7068-4454-aa9f-16df30b14a50
            - name: dagger-engine-config
              mountPath: /etc/dagger/engine.toml
              subPath: engine.toml
      terminationGracePeriodSeconds: 300
      volumes:
        - name: varlibdagger
          hostPath:
            path: /var/lib/dagger
        - name: varrundagger
          hostPath:
            path: /var/run/dagger
        - name: dagger-engine-config
          configMap:
            name: dagger-dagger-helm-engine-config
            items:
              - key: engine.toml
                path: engine.toml
---
# dagger role
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dagger-role
  namespace: dagger
rules:
  - apiGroups: [ "" ]
    resources: ["*"]
    verbs: [ "*" ]
---
# dagger role binding
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dagger-role-binding
  namespace: dagger
subjects:
  - kind: ServiceAccount
    name: kubiya-service-account
    namespace: kubiya
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dagger-role
---
# agent-manager deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-manager
  namespace: kubiya
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-manager
      deployed-by: kubiya
  template:
    metadata:
      labels:
        app: agent-manager
        deployed-by: kubiya
    spec:
      containers:
        - name: agent-manager
          image: ghcr.io/kubiyabot/agent-manager:0.0.15
          imagePullPolicy: Always
          env:
            - name: TOOL_MANAGER_URL
              value: http://tool-manager.kubiya:80
            - name: KUBIYA_NATS_CREDS
              value: /nats/nats.creds
            - name: ENVIRONMENT
              value: production
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /nats/
              name: nats-creds-volume
      volumes:
        - name: nats-creds-volume
          secret:
            defaultMode: 420
            items:
            - key: nats.creds
              path: nats.creds
            secretName: nats-creds-customer  # pragma: allowlist secret
---
# agent-manager service
apiVersion: v1
kind: Service
metadata:
  name: agent-manager
  namespace: kubiya
spec:
  selector:
    app: agent-manager
  ports:
    - name: http
      port: 80
      targetPort: 8080
  type: ClusterIP
---
# tool-manager deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tool-manager
  namespace: kubiya
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tool-manager
      deployed-by: kubiya
  template:
    metadata:
      labels:
        app: tool-manager
        deployed-by: kubiya
    spec:
      serviceAccountName: kubiya-service-account
      containers:
        - name: tool-manager
          image: ghcr.io/kubiyabot/tool-manager:c56f7c6ec6810116c124bb3ae053074687949a19
          imagePullPolicy: Always
          command: ["/bin/bash"]
          args:
            - -c
            - |
              mkdir -p /usr/local/share/ca-certificates
              cp /etc/docker/certs.d/cache-registry-svc.kubiya/tls.crt /usr/local/share/ca-certificates/registry.crt
              update-ca-certificates
              /bin/bash /start_tools_server.sh
          env:
            - name: GIT_SHA
              value: git-sha-placeholder
            - name: KUBIYA_SERVICE_ACCOUNT
              value: kubiya-service-account
            - name: KUBIYA_TOOL_TIMEOUT
              value: 168h
            - name: KUBIYA_NATS_CREDS
              value: /opt/nats.creds
            - name: KUBIYA_USER_ORG
              value: kubiya-test-sniff
            - name: KUBIYA_AGENT_UUID
              value: kubiya-test-sniff
            - name: KUBIYA_SDK_SERVER_URL
              value: "http://127.0.0.1:8000"
            - name: KUBIYA_TOOLS_SHARED_VOLUME
              value: "/tmp/kubiya_shared_tools"
            - name: KUBIYA_IMAGE_REGISTRY_ADDRESS
              value: "cache-registry-svc.kubiya"
          ports:
            - containerPort: 3001
          volumeMounts:
            - mountPath: /opt/
              name: nats-creds-volume
            - mountPath: /tmp/kubiya_shared_tools
              name: shared-volume
            - mountPath: /etc/docker/certs.d/cache-registry-svc.kubiya
              name: registry-certs
        - name: kubiya-sdk-server
          image: ghcr.io/kubiyabot/sdk-py:v0.45.1
          imagePullPolicy: Always
          command: ["python", "-m", "kubiya_sdk", "server", "--host", "0.0.0.0", "--port", "8000"]
          env:
            - name: GIT_SHA
              value: git-sha-placeholder
            - name: KUBIYA_SERVICE_ACCOUNT
              value: kubiya-service-account
            - name: KUBIYA_TOOL_TIMEOUT
              value: 168h
            - name: KUBIYA_NATS_CREDS
              value: /opt/nats.creds
            - name: KUBIYA_USER_ORG
              value: kubiya-test-sniff
            - name: KUBIYA_AGENT_UUID
              value: kubiya-test-sniff
            - name: KUBIYA_TOOLS_SHARED_VOLUME
              value: "/tmp/kubiya_shared_tools"
          ports:
            - containerPort: 8000
          volumeMounts:
            - mountPath: /opt/
              name: nats-creds-volume
            - mountPath: /tmp/kubiya_shared_tools
              name: shared-volume
      volumes:
        - name: nats-creds-volume
          secret:
            defaultMode: 420
            items:
            - key: nats.creds
              path: nats.creds
            secretName: nats-creds-customer  # pragma: allowlist secret
        - name: shared-volume
          emptyDir: {}
        - name: registry-certs
          secret:
            secretName: registry-tls-secret
            defaultMode: 420
---
# tool-manager service
apiVersion: v1
kind: Service
metadata:
  name: tool-manager
  namespace: kubiya
spec:
  selector:
    app: tool-manager
  ports:
    - name: http
      port: 80
      targetPort: 3001
  type: ClusterIP
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: image-updater
  namespace: kubiya
spec:
  schedule: "0 * * * *"  # Run every hour, adjust as needed
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            runAsUser: 0  # Run as root
            runAsGroup: 0
          containers:
          - name: image-updater
            image: bitnami/kubectl:latest
            command: ["/bin/bash"]
            args:
            - -c
            - |
              set -e
              echo "Starting image updater job"
              echo "Installing curl and jq..."
              install_packages curl jq
              echo "Downloading JSON file from S3..."
              MAX_RETRIES=3
              RETRY_DELAY=5
              for i in $(seq 1 $MAX_RETRIES); do
                if curl -s -f https://kubiya-cli.s3.amazonaws.com/stable/kubiya_versions.json > /tmp/kubiya_versions.json; then
                  break
                fi
                echo "Attempt $i failed. Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              done
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Error: Failed to download JSON file after $MAX_RETRIES attempts"
                exit 1
              fi
              if ! jq empty /tmp/kubiya_versions.json; then
                echo "Error: Invalid JSON file downloaded from S3"
                echo "File contents:"
                cat /tmp/kubiya_versions.json
                exit 1
              fi
              update_deployment() {
                local deployment=$1
                local container=$2
                local new_image=$3
                echo "Checking deployment $deployment, container $container"
                current_image=$(kubectl get deployment $deployment -n kubiya -o jsonpath="{.spec.template.spec.containers[?(@.name=='$container')].image}")
                if [ "$current_image" != "$new_image" ]; then
                  echo "Updating $deployment deployment, container $container with new image: $new_image"
                  kubectl set image deployment/$deployment -n kubiya $container=$new_image
                else
                  echo "Deployment $deployment, container $container is already up to date"
                fi
              }
              echo "Updating deployments..."
              tool_manager_image=$(jq -r '."tool-manager"' /tmp/kubiya_versions.json)
              update_deployment "tool-manager" "tool-manager" "$tool_manager_image"
              agent_manager_image=$(jq -r '."agent-manager"' /tmp/kubiya_versions.json)
              update_deployment "agent-manager" "agent-manager" "$agent_manager_image"
              sdk_py_image=$(jq -r '."sdk-py"' /tmp/kubiya_versions.json)
              update_deployment "tool-manager" "kubiya-sdk-server" "$sdk_py_image"
              echo "Image updater job completed successfully"
          serviceAccountName: image-updater-sa
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-updater-sa
  namespace: kubiya
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: deployment-updater
  namespace: kubiya
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: image-updater-rolebinding
  namespace: kubiya
subjects:
- kind: ServiceAccount
  name: image-updater-sa
  namespace: kubiya
roleRef:
  kind: Role
  name: deployment-updater
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: otel-collector-sa-token
  namespace: kubiya
  annotations:
    kubernetes.io/service-account.name: otel-collector-sa
type: kubernetes.io/service-account-token
